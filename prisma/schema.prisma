// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id            Int      @id @default(autoincrement())
  name          String
  password      String
  imageUrl      String
  isPublic      Boolean
  likeCount     Int      @default(0)
  badgeCount    Int      @default(0)  // badgeCount 추가
  postCount     Int      @default(0)
  createdAt     DateTime @default(now())
  introduction  String

  badges        Badge[]  // Group과 Badge 간의 관계 정의
  posts         Post[]
}

model Post {
  id          Int       @id @default(autoincrement())
  groupId     Int
  nickname    String
  title       String
  content     String
  imageUrl    String?
  location    String?
  moment      String
  isPublic    Boolean   @default(true)
  password    String
  createdAt   DateTime  @default(now())
  likeCount   Int       @default(0)
  commentCount  Int     @default(0)
  tags        String[]

  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  comments    Comment[] 
}

model Comment {
  id        Int   @id @default(autoincrement())
  postId    Int
  nickname  String
  content   String
  password  String
  createdAt DateTime  @default(now())

  post      Post  @relation(fields: [postId], references: [id], onDelete: Cascade)

}

model Badge {
  id        Int      @id @default(autoincrement())
  type      BadgeType
  name      String
  imageUrl  String
  groupId   Int
  createdAt DateTime @default(now())

  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}


enum BadgeType {
  WEEK_JOGAK
  TWENTY_MEMORIES
  GROUP_ONE_ANNYVERSARY
  GROUP_LIKE_TEN_THOUSANDS
  MEMORY_LIKE_TEN_THOUSANDS
}